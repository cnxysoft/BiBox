import console;
import inet.http;
import zlib;
import string.xml;
import jieba;

/*基础设定{{*/
console.setTitle( "BiBox" );
_APIURL := "https://api.bilibili.com/x/space/acc/info?mid=";
_PLAPI := "https://api.bilibili.com/x/player/pagelist?bvid=";
_CCAPI := "https://api.bilibili.com/x/player/v2?cid=[cid]&bvid=[bvid]";
_DMAPI := "https://comment.bilibili.com/[cid].xml";
_TRYINTERVAL := 1000; // 昵称获取频率（单位：ms）。
_SPLITLEN := 300; // 弹量取值区间长度（单位：s）。
_DMRatio := 1.5; // 区间弹量触发倍率。
_DMQty := 5; // 设定分析结果显示的高能弹幕数量（单位：条）。
/*}}*/

/*拉取数据{{*/
GetData = function( url ){
	var http = inet.http();
	var html, err, errCode = http.get( url, {
		"Accept-Language" : "zh-CN,zh";
		"User-Agent" : "Mozilla/5.0"
	});
	if html {
		http.close();
		return html
	} else {
		if( http.statusCode ){
			//服务端返回错误信息
			console.log( http.lastResponse(), "HTTP错误代码:" ++ http.statusCode )
		} else {
			//本地内部错误
			console.log( err, errCode )
		}
		http.close();
		return -1
	}
}
/*}}*/

/*格式化时间{{*/
formatTime = function( iTime ){
	return string.format( '%02d:%02d:%06.3f', iTime > 3600 ? iTime / 3600 : 0, iTime > 3600 ? iTime % 3600 / 60 : iTime / 60, iTime % 60 );
}
/*}}*/

/*数组排序{{*/
ArraySortASC = function( tab ){
	table.sort( tab, function( v ) {
		for( i=1; #owner ) if( owner[i] != v[i] ) return owner[i] < v[i]
	})
}

ArraySortDESC = function( tab ){
	table.sort( tab, function( v ) {
		for( i=1; #owner ) if( owner[i] != v[i] ) return owner[i] > v[i]
	})
}
/*}}*/

/*更新昵称FUNC定义{{*/
UpdName = function( path ){
	if path == "" { console.log( "未发现ID文件，程序结束。" ); console.pause() return -1; }
	path = string.replace( path, '@"', '', 2 ); 
	var input = io.splitpath( path );
	if input.ext == ".txt" {
		var file, err = io.open( path, "r+" );
		//批量读入UID
		if file {
			console.log( "成功读入TXT文件。" );
			var aUID = string.split( file.read(-1), '\r\n' );
			var Res = "";
			table.removeByValue( aUID, "", true );
			console.log( "成功读入UID：" ++ #aUID ++ "个" ++ '\r\n准备开始处理……' );
			console.showLoading("处理中……");
			//批量昵称获取
			for( i = 1; #aUID; 1 ){
				sleep( _TRYINTERVAL );
				var html = GetData( _APIURL + aUID[i] );
				if html {
					//将JSON转为TABLE以便提取数据
					var aText, sName = web.json.parse( html ), "";
					if aText.message == "0" {
						sName = aText.data.name
					} else {
						sName = aText.message
					}
					Res ++= aUID[i] + '\t' + sName + '\r\n'
				}
			}
			file.close();
			WriteResult( 1, Res )
		} else {
			console.log( "无法打开指定的TXT文件，错误：" ++ err )
		}
	} else {
		console.log( "请拖入或使用命令行载入ID列表文件，每行一个UID(*.txt)。" )
	}
}
/*}}*/

/*写出照明结果{{*/
WriteResult = function( mode, text ){
	file, err = io.open( "~/" ++ ( mode == 1 ? "查询" : "照明" ) ++ "结果.txt", "w+" );
	if file {
		file.write( text );
		file.close();
		console.log( mode == 1 ? '数据已处理完成，请查看"查询结果.txt"\r\n' : '路灯创建完成，请查看"照明结果.txt"' )
	} else {
		console.log( ( mode == 1 ? "无法创建查询结果，错误：" : "创建照明结果失败，错误：" ) ++ err )
	}
}
/*}}*/

/*路灯FUNC定义{{*/
SLight = function( bvid, part, analyze ){
	part = tonumber( part );
	var cid, sDMUrl, sCCUrl, sCCSub, aKey, sRes, iDuration;
	var html = GetData( _PLAPI + bvid );
	if ! html {
		console.log( "服务器未返回播放列表，程序结束。" );
		return -1
	}
	var aText = web.json.parse( html );	
	if aText.message == 0 {
		cid = #aText.data > 1 ? aText.data[part].cid : aText.data[1].cid;
		iDuration = #aText.data > 1 ? aText.data[part].duration : aText.data[1].duration;
		sCCUrl = string.replace( _CCAPI, '@[cid]', cid, 1 );
		sCCUrl = string.replace( sCCUrl, '@[bvid]', bvid, 1 );
		sDMUrl = string.replace( _DMAPI, '@[cid]', cid, 1 );
		html = GetData( sCCUrl );
		var file, err = io.open( "~/关键词.txt", "r+" );
		if ! file {
			console.log( '无法读入"关键词.txt"，程序结束。' );
			return -1
		}
		if ! html {
			console.log( "服务器未返回字幕列表，程序结束。" );
			return -1
		}
		aKey = string.split( file.read(-1), '\r\n' );
		file.close();
		table.removeByValue( aKey, "", true );
		aText = web.json.parse( html );
		// CC字幕关键字查找
		if #aText.data.subtitle.subtitles > 0 && ! analyze {
			console.showLoading( "字幕处理中……" );
			sCCUrl = "https:" ++ aText.data.subtitle.subtitles[1].subtitle_url;
			html = GetData( sCCUrl );
			if ! html {
				console.log( "服务器未返回CC字幕，程序结束。" );
				return -1
			}
			aText = web.json.parse( html );
			sCCSub = aText.body;
			sRes = 'CC字幕总量：' ++ #sCCSub ++ '条\r\nCC字幕结果：\r\n';
			for( i=1; #sCCSub; 1 ){
				for( ii=1; #aKey; 1 ){
					var tSta = string.find( sCCSub[i].content, "@@" ++ aKey[ii] );
					//content 字幕，from 开始秒，to 结束秒，sid 字幕序号。
					if tSta {
						var tTime = sCCSub[i].from;
						sRes ++= formatTime( tTime ) ++ '\t' ++ sCCSub[i].content ++ '\r\n'
					}
				}
			}
			console.log( "CC字幕数据处理完成，过程结束。" )
		} else {
			console.log( "无CC字幕或功能关闭，过程跳过。" )
		}
		// 弹幕数据处理
		console.showLoading( "弹幕处理中……" );
		html = GetData( sDMUrl );
		html = zlib.gzUncompress( html, "raw" );
		if ! html {
			console.log( "服务器未返回弹幕，程序结束。" );
			return -1
		}
		var xmlDM = string.xml( html );
		if ! xmlDM[2].source {
			console.log( "本视频无弹幕数据，过程跳过。" );
			WriteResult( 2, sRes );
			return -1
		}
		sRes = ( !! sRes ? sRes ++ '\r\n\r\n' : "" ) ++ ( ! analyze ? '弹幕总量：' ++ #xmlDM[2].d ++ '条\r\n弹幕结果：\r\n\r\n' : "" );
		// 弹幕关键字匹配
		if ! analyze {
			var aData, eTime = {}, tonumber( string.split( xmlDM[2].d[#xmlDM[2].d].p, '<,>' )[1] );
			for( i=1; #xmlDM[2].d; 1 ){
				var mark = false;
				for( ii=1; #aKey; 1 ){
					var tSta = string.find( xmlDM[2].d[i][1].text, "@@" ++ aKey[ii] );
					//text 弹幕，p[1] 发送时间。
					if tSta && ! mark {
						var tTime = tonumber( string.split( xmlDM[2].d[i].p, '<,>' )[1] );
						table.push( aData, { formatTime( tTime ), xmlDM[2].d[i][1].text } );
						mark = true;
					}
				}
			}
			var aNewText = {};
			ArraySortASC( aData );
			for( i=1; #aData; 1 ){
				table.push( aNewText, aData[i][1] ++ '\t' ++ aData[i][2] ++ '\r\n' )
			}
			sRes ++= string.join( aNewText );
			console.log( "弹幕数据处理完成，过程结束。" )
		}
		// 区间弹量分析
		if analyze {
			console.showLoading( "弹量分析中……" );
			var jbobj = jieba();
			var sWordGourp = "";
			var sDMFormula, iNTime, cycles, aDMAvg, subTime, aDMText = "(", 300, math.round( iDuration / _SPLITLEN ), {}, 1, {};
			for( i=1; cycles; 1 ){
				var sTotal, sDMText, sResult, sResultGroup, aWordGroup, target, bWordFlag = 0, "", "", {}, {}, 0, false;
				for( ii=1; #xmlDM[2].d; 1 ){
					subTime = tonumber(string.split( xmlDM[2].d[ii].p, '<,>' )[1]);
					if subTime >= iNTime - _SPLITLEN && subTime <= iNTime {
						sDMText ++= xmlDM[2].d[ii][1].text;
						sTotal ++
						//console.dump(xmlDM[2].d[ii][1].text) // 输出弹幕文本
					}
				}
				// 排除部分词性
				for word in jbobj.eachWithOutTagName( sDMText, "x" ){
					sResult ++= word
				}
				sDMText = sResult;
				sResult = "";
				for word,tag in jbobj.eachWithTag( sDMText ){
					if tag == "eng" || #word > 3 {
						sResult ++= word ++ "|"
						sWordGourp ++= word ++ ":" ++ tag ++ "|"
					}
				}
				//console.log('\n');
				//console.dump(sWordGourp); // 输出分词、词性
				//console.log('\n');
				sResultGroup = string.split( sResult, '<|>' );
				ArraySortDESC( sResultGroup );
				//console.dump(sResult) // 输出完整分词结果
				for( i=1; #sResultGroup; 1 ){
					if i > 1 {
						if sResultGroup[i - 1] == sResultGroup[i] {
							aWordGroup[target][1]++;
							bWordFlag = true
						} else {
							bWordFlag = false
						}
					}
					if ! bWordFlag {
						table.push( aWordGroup, { 1 , sResultGroup[i] } );
						target = #aWordGroup
					}
				}
				ArraySortDESC( aWordGroup );
				//console.dump(aWordGroup) // 输出高能弹幕
				//console.pause(); // 暂停一轮
				var tDMText, DMcycle = {}, #aWordGroup > _DMQty ? _DMQty : #aWordGroup;
				for( i=1; DMcycle; 1 ){
					table.push( tDMText, aWordGroup[i][2] ++ "：" ++ aWordGroup[i][1] ++ "次" ++ ( i < DMcycle ? "；" : "" ) )
				}
				table.push( aDMText, string.join( tDMText ) );
				table.push( aDMAvg, sTotal / _SPLITLEN );
				sDMFormula ++= aDMAvg[i] ++ ( i < cycles ? "+" : "" );
				iNTime += _SPLITLEN
			}
			if #sDMFormula > 1 {
				var iTotal = eval( sDMFormula ++ ")/" ++ cycles );
				sRes ++= analyze ? '弹量分析：\r\n\r\n' : '\r\n\r\n弹量分析：\r\n\r\n';
				for( i=1; cycles; 1 ) {
					var ratio = aDMAvg[i] / iTotal;
					if ratio > _DMRatio {
						sRes ++= formatTime( ( i - 1 ) * _SPLITLEN ) ++ " ~ " ++ formatTime( ( i * _SPLITLEN ) )  ++ '\t' ++ ratio ++ '\r\n'
							++ aDMText[i] ++ '\r\n\r\n'
					}
				}
			}
			console.log( "区间弹量分析完成，过程结束。" )
		}
		WriteResult( 2, sRes )
	}
}
/*}}*/

/*命令行流控{{*/
//载入指定文件（调试用）
if( _ARGV.u ){
	UpdName( _ARGV.u )
} elseif ( _ARGV.l ){
	SLight ( table.unpack( string.split( _ARGV[2], '<,>' ) ) )
} elseif ( _ARGV.h ) {
	console.log( '\r\nBiBox v0.2 Alpha 2022 © Cnxysoft, Inc.\r\n\r\n'
		++ '  -u  [UID List.txt]\r\n'
		++ '      更新B站昵称列表(.txt)，每行一个UID，查询后会生成“查询结果.txt”\r\n'
		++ '      由于频繁调用API有可能导致BLOCKED，故默认延迟为1s，暂不可修改。\r\n\r\n'
		++ '  -l  [BVID],[PART]\r\n'
		++ '      视频路灯功能，本程序会采集指定BV号下某P的CC字幕和弹幕数据分别\r\n'
		++ '      进行整理并排序，输出“照明结果.txt”包含发送时间、弹幕内容。触发\r\n'
		++ '      判定的关键字可于“关键词.txt”中进行定义，每行1个，程序自动调用。\r\n'
		++ '      注：本程序会自动判断该视频是否存在CC字幕或弹幕并视具体情况输出。\r\n\r\n'
		++ '  -a  [BVID],[PART]\r\n'
		++ '      自动采集并分析目标视频的弹幕并尝试帮助发现该视频的高能时刻，\r\n'
		++ '      输出“照明结果.txt”作为路灯参考，包含时间、分片弹量倍率、高频词。'
		++ '      注：本程序目前采用的是该视频的区间弹量倍率作为高能时刻的参考。\r\n\r\n'
		++ '  -h  输出使用帮助。\r\n'
	)
} elseif ( _ARGV.a ) {
	var bvid, part = table.unpack( string.split( _ARGV[2], '<,>' ) );
	SLight ( bvid, part, true )
} else {
	var sFunc = console.getText( "请输入功能ID(1昵称|2路灯|3分析)：" )
	select( sFunc ) {
		case "1" {
			var sPath = console.getText( "请拖入UID列表文件(*.txt)：" );
			UpdName( sPath )
		}
		case "2", "3" {
			var bvid, part = table.unpack( string.split( console.getText( "请输入BV号和P编号(例BV,1)：" ), '<,>' ) );
			SLight( bvid, part, (sFunc == "3" ? true : false) )
		}
	}
	console.pause()
}
/*}}*/
